*yggdrasil.txt*  Generate tree-like buffers.
*yggdrasil*

==============================================================================
CONTENTS                                                  *yggdrasil-contents*

    Introduction.....................|yggdrasil-introduction|
    Functions........................|yggdrasil-functions|
    Options..........................|yggdrasil-options|
      g:yggdrasil_no_default_maps....|g:yggdrasil_no_default_maps|
    Mappings.........................|yggdrasil-mappings|
    License..........................|yggdrasil-license|


==============================================================================
Introduction                                          *yggdrasil-introduction*

Yggdrasil is a self-contained VimScript library to create tree-like buffers.

It supports lazy loading of nodes, making it capable to efficiently explore
large trees with many nested nodes, and supports asynchronous execution via
a callback mechanism.

The tree view is populated using a provider object with an API similar to
VSCode's TreeDataProvider
(https://code.visualstudio.com/api/references/vscode-api#TreeDataProvider).

==============================================================================
Functions                                                *yggdrasil-functions*

yggdrasil#tree#new({provider})                            *yggdrasil#tree#new*

    Turns the current buffer into an Yggdrasil tree view. Tree data is
    retrieved from the given {provider} object. The state of the tree is
    stored in a buffer-local variable called b:yggdrasil_tree.

    The {provider} object is a dictionary exposing three member functions:

     * getChildren({callback}, ...)
       When called with no optional argument, produce the object at the root
       of the tree. When called with an optional argument equal to an object
       in the tree, produce a list of children objects.

     * getParent({callback}, {object})
       Produce the parent for the given {object} in the tree.

     * getTreeItem({callback}, {object})
       Produce the tree item representation of the given {object} in the tree.
       The tree item representation is a dictionary containing the following
       fields:
        + id: unique string identifier for the node in the tree
        + collapsibleState: string value, equal to:
           - 'collapsed' for an inner node initially collapsed
           - 'expanded' for an inner node initially expanded
           - 'none' for a leaf node that cannot be expanded nor collapsed
        + command: function object that takes no arguments, it runs when a
          node is executed by the user
        + label: string representing the node in the view

    Each of these methods takes as first argument a {callback} function
    object. The method sends the result to the view by calling the {callback}.
    The first argument to the {callback} is a string denoting the status of
    the operation. If the status is equal to 'success', the result will be
    processed by the view. When the status equals to success, a second
    optional argument can be passed to the callback, containing the result of
    the operation.

    The tree object has some member functions that allow to interact with it:

     * set_collapsed_under_cursor({collapsed}, {recursive})
       If {collapsed} is 1, collapse the node currently under cursor, if it is
       0 expand it, if it is -1 toggle its collapsing state. If {recursive} is
       true, the change is propagated recursively to the whole subtree rooted
       in the node under the cursor.

     * exec_node_under_cursor()
       Trigger the action associated to the execution of the node currently
       under the cursor.

     * update()
       Update the tree, used e.g. to notify the view that the structure of the
       tree or the content of some nodes has changed.

    Other members of the tree object are implementation specific and not part
    of the public API.

    Example:
>
    let s:tree = {
    \     0: [1, 2],
    \     1: [3],
    \     2: [4, 5],
    \     3: [],
    \     4: [6],
    \     5: [],
    \     6: [],
    \ }

    function! s:command_callback(id) abort
        echom 'Calling object ' . a:id . '!'
    endfunction

    function! s:number_to_parent(id) abort
        for [l:parent, l:children] in items(s:tree)
            if index(l:children, a:id) > 0
                return l:parent
            endif
        endfor
    endfunction

    function! s:number_to_treeitem(id) abort
        return {
        \   'id': num2str(a:id),
        \   'command': function('s:command_callback', [a:id]),
        \   'collapsibleState': len(s:tree[a:id]) > 0 ? 'collapsed' : 'none',
        \   'label': 'Label of node ' . a:id,
        \ }
    endfunction

    function! s:GetChildren(Callback, ...) abort
        let l:children = [0]
        if a:0 > 0
            if has_key(s:tree, a:1)
                let l:children = s:tree[a:1]
            else
                call a:Callback('failure')
            endif
        endif
        call a:Callback('success', l:children)
    endfunction

    function! s:GetParent(Callback, object) abort
        call a:Callback('success', s:number_to_parent(a:object))
    endfunction

    function! s:GetTreeItem(Callback, object) abort
        call a:Callback('success', s:number_to_treeitem(a:object))
    endfunction

    let s:provider = {
    \ 'getChildren': function('s:GetChildren'),
    \ 'getParent': function('s:GetParent'),
    \ 'getTreeItem': function('s:GetTreeItem'),
    \ }

    call yggdrasil#tree#new(s:provider)
<

==============================================================================
Options                                                    *yggdrasil-options*

g:yggdrasil_no_default_maps                      *g:yggdrasil_no_default_maps*
    Type: |Any|
    Default: not set

    When this variable is set, no default mapping is created (see
    |yggdrasil-mappings|).

    Example:
>
    " Do not set default mappings
    let g:yggdrasil_no_default_maps = 1
<

==============================================================================
Mappings                                                  *yggdrasil-mappings*

A set of <Plug> mappings are exposed to control Yggdrasil buffers. For an
introduction to <Plug> mappings, please refer to |<Plug>| and |using-<Plug>|.

The available mappings to open, close, toggle, or execute the node currently
under the cursor in a Yggdrasil buffer are:

    <Plug>(yggdrasil-toggle-node)
    <Plug>(yggdrasil-open-node)
    <Plug>(yggdrasil-close-node)
    <Plug>(yggdrasil-open-subtree)
    <Plug>(yggdrasil-close-subtree)
    <Plug>(yggdrasil-execute-node)

The following key bindings are provided out-of-the-box:
>
    nmap <silent> <buffer> o    <Plug>(yggdrasil-toggle-node)
    nmap <silent> <buffer> O    <Plug>(yggdrasil-open-subtree)
    nmap <silent> <buffer> C    <Plug>(yggdrasil-close-subtree)
    nmap <silent> <buffer> <cr> <Plug>(yggdrasil-execute-node)
    nnoremap <silent> <buffer> q :q<cr>
<

They can be disabled (see |g:yggdrasil_no_default_maps|) and replaced with
custom bindings. Example:
>
    let g:yggdrasil_no_default_maps = 1
    au FileType yggdrasil nmap <silent> <buffer> o <Plug>(yggdrasil-toggle-node)
<

==============================================================================
License                                                    *yggdrasil-license*

This software is distributed under the MIT License.

Full license: https://github.com/m-pilia/vim-ccls/blob/master/LICENSE
