*yggdrasil.txt*  Generate tree-like buffers.
*yggdrasil*

==============================================================================
CONTENTS                                                  *yggdrasil-contents*

    Introduction.....................|yggdrasil-introduction|
    Design...........................|yggdrasil-design|
    Functions........................|yggdrasil-functions|
      Node functions.................|yggdrasil-node-functions|
      Tree functions.................|yggdrasil-tree-functions|
    Options..........................|yggdrasil-options|
      g:yggdrasil_no_default_maps....|g:yggdrasil_no_default_maps|
    Mappings.........................|yggdrasil-mappings|
    License..........................|yggdrasil-license|


==============================================================================
Introduction                                          *yggdrasil-introduction*

Yggdrasil is a self-contained VimScript library to create tree-like buffers.

==============================================================================
Design                                                      *yggdrasil-design*

The library provides two types of object: nodes and trees.

A node object represents a node in an Yggdrasil tree. Each node has the
following fields, defining its state:
 * id: A unique numeric identifier. When rendering the tree, the id is
   printed at the end of the node representation, and it is concealed to
   not be visible by the user (|conceal|). This allows to quickly know
   which node is under the cursor when interacting with the tree.
 * label: A string, representing the content of the node. It will be displayed
   when rendering the tree.
 * parent: Reference to the parent node.
 * collapsed: Boolean value defining whether the node should be collapsed or
   expanded when rendering the tree.
 * lazy_open: Function object, intended to lazily populate the list of
   children for a node on the first time the node is expanded. It takes as its
   only argument a reference to the node itself. When a node having a callable
   lazy_open member is expanded for the first time, the callback is executed,
   and then the lazy_open field is set to v:null and on future expansions of
   the node, only the content of the children field will be considered.
 * callback: Function object, which will be called when executing the action
   associated to the node. It takes as unique argument a reference to the node
   itself.
 * children: List of children node objects.
A node object has a set of member functions that allow to interact with it
(|yggdrasil-node-functions|).

A tree object represents the state of an Yggdrasil tree, and each Yggdrasil
buffer is associated to a tree object, stored in a buffer-local variable. Each
tree object has the following fields:
 * bufnr: Buffer number associated to the Yggdrasil tree buffer.
 * maxid: Highest id of any child node in the tree.
 * root: reference to the root node in the tree.
A tree object has a set of member functions that allow to interact with it
(|yggdrasil-tree-functions|).

==============================================================================
Functions                                                *yggdrasil-functions*

yggdrasil#node#new({id}, {label}, {parent}, {callback}, {lazy_open})

    Return a new node object, with its fields set to the arguments passed to
    the function.

yggdrasil#tree#new({size}, {position}, {orientation})

    Create a new window with given {position} (|topleft| or |botright|),
    {orientation} (horizontal or vertical), and {size} (number of rows or
    columns if vertical or horizontal respectively). The window contains a new
    buffer initialised as an Yggdrasil tree. Create and initialise a tree
    object, stored in the b:yggdrasil_tree variable, containing no nodes (the
    `root` is set to `{}`).

------------------------------------------------------------------------------
Node functions                                      *yggdrasil-node-functions*

yggdrasil#node#set_collapsed({collapsed}, {recursive})

    Set the node to be collapsed or expanded.

    When {collapsed} evaluates to true, the node is
    collapsed, when it evaluates to false it is expanded, when it is equal to
    -1 the node is toggled (it is expanded if it was collapsed, and vice
    versa).

    If {recursive} evaluates to true, the change is propagated recursively to
    all the nodes in the sub-tree rooted in this node. If it evaluates to
    false, only this node is changed.

yggdrasil#node#find({id})

    Return the node object whose id is equal to {id}.

yggdrasil#node#exec()

    Execute the callback action associated to this node.

yggdrasil#node#level()

    Return the depth level of the node in the tree. The level is defined
    recursively: the root has depth 0, and each node has depth equal to the
    depth of its parent increased by 1.

yggdrasil#node#render({level})

    Return the string representation of the node. The {level} argument is
    passed for convenience, in order to avoid re-computing the depth
    separately.

yggdrasil#node#append({id}, {label}, {callback}, {lazy_open})

    Append a new children to the current node, with fields given by the
    arguments.

------------------------------------------------------------------------------
Tree functions                                      *yggdrasil-tree-functions*

yggdrasil#tree#get_node_id_under_cursor()

    Return the id of the node under the cursor.

yggdrasil#tree#set_collapsed_under_cursor({collapsed}, {recursive})

    Expand or collapse the node under cursor, and render the tree.
    Please refer to *yggdrasil#node#set_collapsed()* for details about the
    arguments and behaviour.

yggdrasil#tree#insert({label}, {callback}, {lazy_open} [, {parent_id}])

    Insert a new node in the tree, with label set to {label}, execution action
    defined by {callback}, and lazy opening callback defined by {lazy_open}.

    If the tree is empty or {parent_id} is not specified, the new node becomes
    the root of the tree, and the previous root (if any) will become a child
    of the new node. Otherwise, if {parent_id} is given, the new node will
    have as parent the node in the tree whose id equals {parent_id}.

yggdrasil#tree#render()

    Render the tree, replacing the current content of the buffer.

==============================================================================
Options                                                    *yggdrasil-options*

g:yggdrasil_no_default_maps                      *g:yggdrasil_no_default_maps*
    Type: |Any|
    Default: not set

    When this variable is set, no default mapping is created (see
    |yggdrasil-mappings|).

    Example:
>
    " Do not set default mappings
    let g:yggdrasil_no_default_maps = 1
<

==============================================================================
Mappings                                                  *yggdrasil-mappings*

A set of <Plug> mappings are exposed to control Yggdrasil buffers. For an
introduction to <Plug> mappings, please refer to |<Plug>| and |using-<Plug>|.

The available mappings to open, close, toggle, or execute the node currently
under the cursor in a Yggdrasil buffer are:

    <Plug>(yggdrasil-toggle-node)
    <Plug>(yggdrasil-open-node)
    <Plug>(yggdrasil-close-node)
    <Plug>(yggdrasil-open-subtree)
    <Plug>(yggdrasil-close-subtree)
    <Plug>(yggdrasil-execute-node)

The following key bindings are provided out-of-the-box:
>
    nmap <silent> <buffer> o    <Plug>(yggdrasil-toggle-node)
    nmap <silent> <buffer> O    <Plug>(yggdrasil-open-subtree)
    nmap <silent> <buffer> C    <Plug>(yggdrasil-close-subtree)
    nmap <silent> <buffer> <cr> <Plug>(yggdrasil-execute-node)
    nnoremap <silent> <buffer> q :q<cr>
<

They can be disabled (see |g:yggdrasil_no_default_maps|) and replaced with
custom bindings. Example:
>
    let g:yggdrasil_no_default_maps = 1
    au FileType yggdrasil nmap <silent> <buffer> o <Plug>(yggdrasil-toggle-node)
<

==============================================================================
License                                                    *yggdrasil-license*

This software is distributed under the MIT License.

Full license: https://github.com/m-pilia/vim-ccls/blob/master/LICENSE
